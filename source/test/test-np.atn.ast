(PROGRAM (def isUpper (PARAMS s) (LIST_INSTR (return (and (>= ([ s 0) "A") (<= ([ s 0) "Z"))))) (def member (PARAMS s l) (LIST_INSTR (for (:= i 0) (< i (ARRAYLENGTH l)) (:= i (+ i 1)) (LIST_INSTR (if (== s ([ l i)) (LIST_INSTR (return true))))) (return false))) (:= nombre "") (atn np (NODELIST (:= pre (ARRAY_DECL "dr" "sr" "de")) (:= fun (ARRAY_DECL "de" "la" "el")) (:= suf (ARRAY_DECL "junior" "senior")) (node IN (ARC_LIST (arc (FUNCALL isUpper (ARGLIST (# 0))) (goto NP) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc (FUNCALL member (ARGLIST (# 0) pre)) (goto PREF) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc true (goto IN)))) (node PREF (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) pre)) (goto PREF) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc (FUNCALL isUpper (ARGLIST (# 0))) (goto NP) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc true (goto IN) (LIST_INSTR (:= nombre ""))))) (node NP (ARC_LIST (arc (FUNCALL isUpper (ARGLIST (# 0))) (goto NP) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc (FUNCALL member (ARGLIST (# 0) suf)) (goto SUF) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc (FUNCALL member (ARGLIST (# 0) fun)) (goto FUN) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc true (goto END)))) (node SUF (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) suf)) (goto SUF) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc true (goto END)))) (node FUN (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) fun)) (goto FUN) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))) (arc (FUNCALL isUpper (ARGLIST (# 0))) (goto NP) (LIST_INSTR (:= nombre (+ (+ nombre (# 0)) " ")))))) (node END accept))) (def main PARAMS (LIST_INSTR (:= a (ATNCALL np)) (if a (LIST_INSTR (print "Nombre encontrado: " nombre "%n")) (LIST_INSTR (print "ningÃºn nombre ha sido encontrado" "%n"))))))
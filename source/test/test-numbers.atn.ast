(PROGRAM (:= n 0) (def member (PARAMS s l) (LIST_INSTR (for (:= i 0) (< i (ARRAYLENGTH l)) (:= i (+ i 1)) (LIST_INSTR (if (== s ([ l i)) (LIST_INSTR (return true))))) (return false))) (:= c (ARRAY_DECL "ciento" "doscientos" "trescientos" "quatrocientos" "quinientos" "seiscientos" "setecientos" "ochocientos" "novecientos")) (:= d (ARRAY_DECL "diez" "once" "doce" "trece" "catorce" "quince" "dieciseis" "diecisiete" "dieciocho" "diecinueve" "veinte" "veintiuno" "veintidos" "veintitres" "veinticuatro" "veinticinco" "veintiseis" "veitisiete" "veintiocho" "veintinueve" "treinta" "cuarenta" "cincuenta" "sesenta" "setenta" "ochenta" "noventa")) (:= u (ARRAY_DECL "uno" "dos" "tres" "cuatro" "cinco" "seis" "siete" "ocho" "nueve")) (def translate (PARAMS text) (LIST_INSTR (if (== text "ciento") (LIST_INSTR (return 100))) (if (== text "doscientos") (LIST_INSTR (return 200))) (if (== text "trescientos") (LIST_INSTR (return 300))) (if (== text "quatrocientos") (LIST_INSTR (return 400))) (if (== text "quinientos") (LIST_INSTR (return 500))) (if (== text "seiscientos") (LIST_INSTR (return 600))) (if (== text "setecientos") (LIST_INSTR (return 700))) (if (== text "ochocientos") (LIST_INSTR (return 800))) (if (== text "novecientos") (LIST_INSTR (return 900))) (if (== text "diez") (LIST_INSTR (return 10))) (if (== text "once") (LIST_INSTR (return 11))) (if (== text "doce") (LIST_INSTR (return 12))) (if (== text "trece") (LIST_INSTR (return 13))) (if (== text "catorce") (LIST_INSTR (return 14))) (if (== text "quince") (LIST_INSTR (return 15))) (if (== text "dieciseis") (LIST_INSTR (return 16))) (if (== text "diecisiete") (LIST_INSTR (return 17))) (if (== text "dieciocho") (LIST_INSTR (return 18))) (if (== text "diecinueve") (LIST_INSTR (return 19))) (if (== text "veinte") (LIST_INSTR (return 20))) (if (== text "veintiuno") (LIST_INSTR (return 21))) (if (== text "veintidos") (LIST_INSTR (return 22))) (if (== text "veintitres") (LIST_INSTR (return 23))) (if (== text "veinticuatro") (LIST_INSTR (return 24))) (if (== text "veinticinco") (LIST_INSTR (return 25))) (if (== text "veintiseis") (LIST_INSTR (return 26))) (if (== text "veitisiete") (LIST_INSTR (return 27))) (if (== text "veintiocho") (LIST_INSTR (return 28))) (if (== text "veintinueve") (LIST_INSTR (return 29))) (if (== text "treinta") (LIST_INSTR (return 30))) (if (== text "cuarenta") (LIST_INSTR (return 40))) (if (== text "cincuenta") (LIST_INSTR (return 50))) (if (== text "sesenta") (LIST_INSTR (return 60))) (if (== text "setenta") (LIST_INSTR (return 70))) (if (== text "ochenta") (LIST_INSTR (return 80))) (if (== text "noventa") (LIST_INSTR (return 90))) (if (== text "uno") (LIST_INSTR (return 1))) (if (== text "dos") (LIST_INSTR (return 2))) (if (== text "tres") (LIST_INSTR (return 3))) (if (== text "cuatro") (LIST_INSTR (return 4))) (if (== text "cinco") (LIST_INSTR (return 5))) (if (== text "seis") (LIST_INSTR (return 6))) (if (== text "siete") (LIST_INSTR (return 7))) (if (== text "ocho") (LIST_INSTR (return 8))) (if (== text "nueve") (LIST_INSTR (return 9))))) (atn numbers (NODELIST (node B1 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto B2) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Bu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto B3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto B5) (LIST_INSTR (:= n 1000))) (arc (== (# 0) "medio") (goto X4)))) (node B2 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Bu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto B3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto B5) (LIST_INSTR (:= n (* n 1000)))) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node B3 (ARC_LIST (arc (== (# 0) "mil") (goto B5) (LIST_INSTR (:= n (* n 1000)))) (arc (== (# 0) "y") (goto B4)) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node B4 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Bu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))))) (node B5 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto B6) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto B7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Bk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node B6 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto B7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Bk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node B7 (ARC_LIST (arc (== (# 0) "y") (goto B4)) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node B8 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto B7)))) (node Bu (ARC_LIST (arc (== (# 0) "mil") (goto B5) (LIST_INSTR (:= n (* n 1000)))) (arc (or (or (or (or (or (or (or (== (# 0) "decena") (== (# 0) "decenas")) (== (# 0) "docena")) (== (# 0) "docenas")) (== (# 0) "centena")) (== (# 0) "centenas")) (== (# 0) "millar")) (== (# 0) "millares")) (goto X1) (LIST_INSTR (if (== (# 0) "decena") (LIST_INSTR (:= n (* n 10)))) (if (== (# 0) "decenas") (LIST_INSTR (:= n (* n 10)))) (if (== (# 0) "docena") (LIST_INSTR (:= n (* n 12)))) (if (== (# 0) "docenas") (LIST_INSTR (:= n (* n 12)))) (if (== (# 0) "centena") (LIST_INSTR (:= n (* n 100)))) (if (== (# 0) "centenas") (LIST_INSTR (:= n (* n 100)))) (if (== (# 0) "millar") (LIST_INSTR (:= n (* n 1000)))) (if (== (# 0) "millares") (LIST_INSTR (:= n (* n 1000)))))) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node Bk (ARC_LIST (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node X1 (ARC_LIST (arc (== (# 0) "y") (goto B4)) (arc true (goto END)))) (node X2 (ARC_LIST (arc (or (== (# 0) "medio") (== (# 0) "cuarto")) (goto X3) (LIST_INSTR (if (== (# 0) "medio") (LIST_INSTR (:= n (/ n 2)))) (if (== (# 0) "cuarto") (LIST_INSTR (:= n (/ n 4)))))))) (node X3 (ARC_LIST (arc true (goto END)))) (node X4 (ARC_LIST (arc (or (or (or (or (or (or (or (== (# 0) "decena") (== (# 0) "decenas")) (== (# 0) "docena")) (== (# 0) "docenas")) (== (# 0) "centena")) (== (# 0) "centenas")) (== (# 0) "millar")) (== (# 0) "millares")) (goto X1) (LIST_INSTR (if (== (# 0) "decena") (LIST_INSTR (:= n (* n 10)))) (if (== (# 0) "decenas") (LIST_INSTR (:= n (* n 10)))) (if (== (# 0) "docena") (LIST_INSTR (:= n (* n 12)))) (if (== (# 0) "docenas") (LIST_INSTR (:= n (* n 12)))) (if (== (# 0) "centena") (LIST_INSTR (:= n (* n 100)))) (if (== (# 0) "centenas") (LIST_INSTR (:= n (* n 100)))) (if (== (# 0) "millar") (LIST_INSTR (:= n (* n 1000)))) (if (== (# 0) "millares") (LIST_INSTR (:= n (* n 1000)))))) (arc (or (== (# 0) "billon") (== (# 0) "billones")) (goto M1) (LIST_INSTR (:= n (* n 1000000000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))))) (node X5 (ARC_LIST (arc true (goto END)))) (node M1 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto M2) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Mu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto M3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto M5) (LIST_INSTR (:= n (* n 1000)))) (arc (== (# 0) "y") (goto M1a)) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M2 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Mu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto M3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto M5) (LIST_INSTR (:= n (* n 1000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M3 (ARC_LIST (arc (== (# 0) "mil") (goto M5) (LIST_INSTR (:= n (* n 1000)))) (arc (== (# 0) "y") (goto M4)) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M4 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Mu) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))))) (node M5 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto M6) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto M7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Mk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M6 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto M7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Mk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M7 (ARC_LIST (arc (== (# 0) "y") (goto M4)) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node M8 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto M7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))))) (node Mu (ARC_LIST (arc (== (# 0) "mil") (goto M5) (LIST_INSTR (:= n (* n 1000)))) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))) (arc true (goto END)))) (node Mk (ARC_LIST (arc true (goto END)) (arc (or (== (# 0) "millon") (== (# 0) "millones")) (goto S1) (LIST_INSTR (:= n (* n 1000000)))))) (node M1a (ARC_LIST (arc (or (== (# 0) "medio") (== (# 0) "cuarto")) (goto X3) (LIST_INSTR (if (== (# 0) "medio") (LIST_INSTR (:= n (/ n 2)))) (if (== (# 0) "cuarto") (LIST_INSTR (:= n (/ n 4)))))))) (node M1b (ARC_LIST (arc true (goto END)))) (node S1 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto S2) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Su) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto S3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto S5) (LIST_INSTR (:= n (* n 1000)))) (arc (== (# 0) "y") (goto S1a)) (arc true (goto END)))) (node S2 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Su) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto S3) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (== (# 0) "mil") (goto S5) (LIST_INSTR (:= n (* n 1000)))) (arc true (goto END)))) (node S3 (ARC_LIST (arc (== (# 0) "mil") (goto S5) (LIST_INSTR (:= n (* n 1000)))) (arc (== (# 0) "y") (goto S4)) (arc true (goto END)))) (node S4 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto Su) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))))) (node S5 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) c)) (goto S6) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) u)) (goto S7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Sk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc true (goto END)))) (node S6 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto S7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc (FUNCALL member (ARGLIST (# 0) d)) (goto Sk) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))) (arc true (goto END)))) (node S7 (ARC_LIST (arc (== (# 0) "y") (goto S4)) (arc true (goto END)))) (node S8 (ARC_LIST (arc (FUNCALL member (ARGLIST (# 0) u)) (goto S7) (LIST_INSTR (:= n (+ n (FUNCALL translate (ARGLIST (# 0))))))))) (node Su (ARC_LIST (arc (== (# 0) "mil") (goto S5) (LIST_INSTR (:= n (* n 1000)))) (arc true (goto END)))) (node Sk (ARC_LIST (arc true (goto END)))) (node S1a (ARC_LIST (arc (or (== (# 0) "medio") (== (# 0) "cuarto")) (goto X3) (LIST_INSTR (if (== (# 0) "medio") (LIST_INSTR (:= n (/ n 2)))) (if (== (# 0) "cuarto") (LIST_INSTR (:= n (/ n 4)))))))) (node S1b (ARC_LIST (arc true (goto END)))) (node END accept))) (def main PARAMS (LIST_INSTR (:= a (ATNCALL numbers)) (if a (LIST_INSTR (print "the parsed number is: " n "%n")) (LIST_INSTR (print "no number has been found %n"))))))